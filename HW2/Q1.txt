/*
 * Same question as HW1, use spark/scala this time.
 */
spark-shell --executor-memory 8G --driver-memory 8G

def direct_friend_pair(line:(String, Array[String])): Array[((String, String), Int)] = {
    val rst = new Array[((String, String), Int)](line._2.length)
    for(i <- 0 to line._2.length - 1) {
        rst(i) = (Tuple2(line._1, line._2(i)), -1)
    }
    rst
}
    		    	 
def secondary_friend_pair(line: (String, Array[String])): Array[((String, String), Int)] = {
    val rst = new Array[((String, String), Int)](line._2.length * (line._2.length - 1))
    var num = 0
    for (i <- 0 to line._2.length - 1) {
        for(j <- 0 to line._2.length - 1) { 
	        if (i != j) {       
          	rst(num) = (Tuple2(line._2(i), line._2(j)), 1)
          	num = num + 1 
	        }       
        }
    }
    rst
}

def sample_output(line: (String, Iterable[String])): Boolean = {
    val sample = Array("924", "8941", "8942", "9019", "9020", "9021", "9022", "9990", "9992", "9993")
    for(i <- sample) {
        if(line._1 == i) {
            return true
        }
    }
    false
}


val lines = sc.textFile("/socNetData/networkdata/soc-LiveJournal1Adj.txt")
val ln = lines.map(line => line.split("\t")).filter(_.length > 1).map(line => (line(0) -> (line(1).split(",")))).cache
val sec_friend = ln.flatMap(secondary_friend_pair)
val dir_friend = ln.flatMap(direct_friend_pair)
val rst = sec_friend.union(dir_friend).reduceByKey(_*_).filter(_._2 == 1).map(line => line._1).groupByKey().filter(sample_output).collect.foreach(println)
